// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: polls.sql

package db

import (
	"context"
	"database/sql"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls (title, user_id)
VALUES ($1, $2)
RETURNING id,title, user_id
`

type CreatePollParams struct {
	Title  string `json:"title"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRowContext(ctx, createPoll, arg.Title, arg.UserID)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.UserID)
	return i, err
}

const deletePoll = `-- name: DeletePoll :exec
DELETE FROM polls
WHERE id = $1
`

func (q *Queries) DeletePoll(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePoll, id)
	return err
}

const getAllPolls = `-- name: GetAllPolls :many
SELECT
    p.id AS poll_id,
    p.title,
    p.user_id,
    o.id AS option_id,
    o.content,
    o.correct
FROM polls p
LEFT JOIN options o ON p.id = o.poll_id
ORDER BY p.id ASC
`

type GetAllPollsRow struct {
	PollID   int32          `json:"poll_id"`
	Title    string         `json:"title"`
	UserID   int32          `json:"user_id"`
	OptionID sql.NullInt32  `json:"option_id"`
	Content  sql.NullString `json:"content"`
	Correct  sql.NullBool   `json:"correct"`
}

func (q *Queries) GetAllPolls(ctx context.Context) ([]GetAllPollsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPolls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPollsRow
	for rows.Next() {
		var i GetAllPollsRow
		if err := rows.Scan(
			&i.PollID,
			&i.Title,
			&i.UserID,
			&i.OptionID,
			&i.Content,
			&i.Correct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPollByID = `-- name: GetPollByID :one
SELECT id, title, user_id
FROM polls
WHERE id = $1
`

func (q *Queries) GetPollByID(ctx context.Context, id int32) (Poll, error) {
	row := q.db.QueryRowContext(ctx, getPollByID, id)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.UserID)
	return i, err
}

const updatePoll = `-- name: UpdatePoll :exec
UPDATE polls
SET title = $1
WHERE id = $2
`

type UpdatePollParams struct {
	Title string `json:"title"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdatePoll(ctx context.Context, arg UpdatePollParams) error {
	_, err := q.db.ExecContext(ctx, updatePoll, arg.Title, arg.ID)
	return err
}
