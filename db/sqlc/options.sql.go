// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: options.sql

package db

import (
	"context"
	"database/sql"
)

const createOption = `-- name: CreateOption :one
INSERT INTO options (content, correct, poll_id)
VALUES ($1, $2, $3)
RETURNING id, content, correct, poll_id
`

type CreateOptionParams struct {
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
	PollID  int32        `json:"poll_id"`
}

type CreateOptionRow struct {
	ID      int32        `json:"id"`
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
	PollID  int32        `json:"poll_id"`
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (CreateOptionRow, error) {
	row := q.db.QueryRowContext(ctx, createOption, arg.Content, arg.Correct, arg.PollID)
	var i CreateOptionRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Correct,
		&i.PollID,
	)
	return i, err
}

const deleteOption = `-- name: DeleteOption :exec
DELETE FROM options
WHERE id = $1
`

func (q *Queries) DeleteOption(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOption, id)
	return err
}

const getAllOptions = `-- name: GetAllOptions :many
SELECT content, correct
FROM options
`

type GetAllOptionsRow struct {
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
}

func (q *Queries) GetAllOptions(ctx context.Context) ([]GetAllOptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOptionsRow
	for rows.Next() {
		var i GetAllOptionsRow
		if err := rows.Scan(&i.Content, &i.Correct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionByID = `-- name: GetOptionByID :one
SELECT content, correct
FROM options
WHERE id = $1
`

type GetOptionByIDRow struct {
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
}

func (q *Queries) GetOptionByID(ctx context.Context, id int32) (GetOptionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOptionByID, id)
	var i GetOptionByIDRow
	err := row.Scan(&i.Content, &i.Correct)
	return i, err
}

const getOptionByPollID = `-- name: GetOptionByPollID :many
SELECT content, correct
FROM options
WHERE poll_id = $1
`

type GetOptionByPollIDRow struct {
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
}

func (q *Queries) GetOptionByPollID(ctx context.Context, pollID int32) ([]GetOptionByPollIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOptionByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionByPollIDRow
	for rows.Next() {
		var i GetOptionByPollIDRow
		if err := rows.Scan(&i.Content, &i.Correct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOption = `-- name: UpdateOption :exec
UPDATE options
SET content = $1, correct = $2
WHERE id = $3
`

type UpdateOptionParams struct {
	Content string       `json:"content"`
	Correct sql.NullBool `json:"correct"`
	ID      int32        `json:"id"`
}

func (q *Queries) UpdateOption(ctx context.Context, arg UpdateOptionParams) error {
	_, err := q.db.ExecContext(ctx, updateOption, arg.Content, arg.Correct, arg.ID)
	return err
}
